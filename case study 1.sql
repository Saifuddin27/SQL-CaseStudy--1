    

	                                    --CASE STUDY ONE--

create database administrator
use administrator

1)--// Display number of states present in location table//
SELECT COUNT(DISTINCT State)as no_of_States FROM [Location File]

2)--//How many products are of regular type //
SELECT COUNT(*)as no_of_products FROM [Product File]  where [Type] ='Regular'

3)--//How much spending has been done on marketing of product id 1//
SELECT SUM(Marketing)as spending FROM [Fact File] WHERE productId = 1

4)--//What is the minimum sales of a product //
SELECT MIN(sales) as MinimumSales
FROM [fact file]
WHERE ProductId = [ProductId]

5)--// Display max Cost of Good Sold(COGS)//
SELECT Max(COGS) as MaximumSales
FROM [fact file]
WHERE ProductId = [ProductId]

6)--//Display the Details of the productid where product type is coffee//
SELECT *from [Product file] where Product_Type='coffee' and ProductId =[ProductId]
--------------------or--------------------------------------------
SELECT  *from [Product file] where Product_Type='coffee'

7)--//Display the details where total_expenses is greater than 40//
SELECT *from [fact file] where total_expenses > 40

8)--// What is the average sales in Area_Code 719 //
SELECT  avg(Sales)as avg_sales from [fact file] where Area_Code ='719'

9)--//Find out the total profit generated by Colorado state. //

SELECT SUM(profit)as total_profit
FROM [fact file]
JOIN [Location file] ON [fact file].Area_Code = [Location file].Area_Code
WHERE [Location file].State = 'Colorado'

10)--// Display the average inventory for each product id.//
SELECT ProductId, AVG(Inventory) AS avg_inventory
FROM [fact file]
GROUP BY ProductId

11)--//Display state in a sequential order in a location table.//
SELECT State from [Location file] order by State Asc

12)--// Display the average budget margin where average budget margin should be greater than 100//
SELECT avg(Budget_Margin)avg_budget_Margin from [fact file] where Budget_Margin> 100

13)--//What is the total sales done on date 2010-01-01//
SELECT SUM(Sales) AS total_sales FROM [fact file]
WHERE Date = '2010-01-01'

14)--// Display the average total expense of each product id on individual date//
SELECT ProductId, Date, AVG(Total_Expenses) AS avg_expense
FROM [fact file]
GROUP BY ProductId, Date

15)--// Display the table with the following attributes such as
---Date, productid, product_type, product, Sales, profit, state, area_code//

SELECT f.Date, f.ProductId, p.Product_Type, p.Product, f.Sales, f.Profit, l.State, f.Area_Code
FROM [fact file] f
INNER JOIN [Product file] p ON f.ProductId = p.ProductId
INNER JOIN [Location File] l ON f.Area_Code = l.Area_Code

16)--//Display the rank without any gap to show the Sales wise rank.//
SELECT Sales, RANK() OVER (ORDER BY Sales DESC) as sales_rank
FROM [fact file]

17)--// Find the State wise Profit and Sales. //
SELECT l.state, SUM(f.sales) AS total_sales, SUM(f.profit) AS total_profit
FROM [fact file] f
JOIN [Location file] l ON f.Area_Code= l.Area_Code
GROUP BY l.State

18)--//Find the State wise Profit and Sales along with the Product Name.//
SELECT l.state, p.Product_Type, SUM(f.sales) AS total_sales, SUM(f.profit) AS total_profit
FROM [fact file] f
JOIN [Product file] p ON f.ProductId = p.ProductId
JOIN [Location file] l ON f.Area_Code = l.Area_code
GROUP BY l.State, p.Product_Type 

19)--// If there is an increase Caffe Mocha in sales of 5%. Calculate the increased sales.//
SELECT f.sales * 1.05 AS increased_sales
FROM [fact file] f
JOIN [Product file] p ON f.ProductId = p.ProductId
WHERE p.Product = 'Caffe Mocha'

20)--// Find the maximum profit along with the Product id and Product Type.//
SELECT MAX(f.profit) AS max_profit, f.ProductId, p.Product_Type
FROM [fact file] f
JOIN [Product file] p ON f.ProductId = p.ProductId
GROUP BY f.ProductId, p.Product_Type

21)--// Create a Stored Procedure to fetch the result according to the product type from Product.//
CREATE PROCEDURE GetProductsByType
    @product_type varchar(50)
AS
BEGIN
    SELECT *
    FROM [Product file]
    WHERE Product_type = @product_type
END
EXEC GetProductsByType 'Coffee'

22)--// Write a query by creating a condition in which if the total expenses is less than 60 then it is a
--profit or else loss.//
SELECT 
    Total_Expenses, 
    Profit, 
    CASE 
        WHEN Total_Expenses < 60 THEN 'Profit'
        ELSE 'Loss'
    END AS 'Result'
FROM 
    [fact file]
	
23)--// Give the total weekly sales value with the Date and productid details.Use roll-up to pull the
--data in hierarchical order.// 
SELECT 
    Date, 
    ProductID, 
    SUM(Sales) AS Weekly_Sales
FROM 
    [fact file]
GROUP BY 
    ROLLUP(Date, ProductID)
ORDER BY 
    Date, ProductID

24) --//Apply union and intersection operator on the tables which consist of attribute area code. //
SELECT area_code FROM (
    SELECT area_code FROM [fact file]
    UNION
    SELECT area_code FROM [Location file]
) AS union_table
WHERE area_code IN (
    SELECT area_code FROM [fact file]
    INTERSECT
    SELECT area_code FROM [Location file]
)

25)--// Create a user-defined function for the product table to fetch a particular product typ based
--upon the user’s preference.// 
CREATE FUNCTION get_product_by_type (@product_type VARCHAR(50))
RETURNS TABLE
AS
RETURN (
    SELECT * FROM [Product file]
    WHERE product_type = @product_type
)
SELECT * FROM get_product_by_type('Coffee')

26)--// Change the product type from coffee to tea where product id is 1 and undo it.//
UPDATE [Product file] SET Product_Type = 'tea' WHERE ProductId = 1
SELECT *from [Product file]
----------to undo it-----------------------------------
UPDATE [Product file] SET Product_Type = 'coffee' WHERE ProductId = 1
SELECT *from [Product file]

27)--// Display the Date, productid and sales where total expenses are between 100 to 200.//
Select Date,ProductId,Sales from [fact file] where Total_Expenses between 100 and 200

28)--// Delete the records in the product table for regular type.//
DELETE from [Product file] where type='regular'
SELECT *from [Product file]

29)--// Display the ASCII value of the fifth character from the column product//
SELECT ASCII(SUBSTRING(product, 5, 1)) AS ascii_value FROM [Product file]




